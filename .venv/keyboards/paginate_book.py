from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

CHARS_PER_PAGE = 500
HEAD = '''üìú <code>–ü–†–û–¢–û–ö–û–õ ¬´–†–ê–ó–ì–†–û–ú¬ª</code>\n
<code>-----------------------</code>\n'''
DOWN = '''\n<code>-----------------------</code>'''

TEXT = '''
<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>

–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–≤–æ–Ω–æ–∫:

<code>(‚ÅΩ‚ÅΩ‚òéÔ∏è‚Åæ‚Åæ) –í—ã–∑–æ–≤ –æ—Ç –¢–∞–π–ª–µ—Ä–∞</code>

‚Äî –≤ –∫–æ—Ç–æ—Ä–æ–º –¢–∞–π–ª–µ—Ä –Ω–∞–∑–æ–≤—ë—Ç —Ç–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n–ù–µ –ø—Ä–∏–∫–∞–∑, –Ω–µ —É–ª—å—Ç–∏–º–∞—Ç—É–º ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤. –¢—ã –º–æ–∂–µ—à—å –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ò–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –≠—Ç–æ —Ç–≤–æ–π –≤—ã–±–æ—Ä, —Ç–≤–æ—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Ç–≤–æ—è —Å–ª–∞–±–æ—Å—Ç—å.

–°–∏—Å—Ç–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç –¥–∞–≤–∏—Ç—å –Ω–∞ —Ç–µ–±—è ‚Äî –æ–Ω–∞ –ª–∏—à—å –ø–æ–∫–∞–∂–µ—Ç –¥–≤–µ—Ä—å. –í–æ–π—Ç–∏ –∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è —Å–Ω–∞—Ä—É–∂–∏ ‚Äî —Ä–µ—à–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Ç—ã. –ù–æ –∑–Ω–∞–π: –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ ‚Äî —ç—Ç–æ –Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã, –∞ —Ç–≤–æ—è –ª–∏—á–Ω–∞—è –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏—è.\n\n–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –Ω–µ –¥–ª—è –±–æ—Ç–∞, –Ω–µ –¥–ª—è –±–∞–ª–ª–æ–≤, –∞ –¥–ª—è —Å–µ–±—è. –í–µ—Ä–Ω–µ–µ, –¥–ª—è —Ç–æ–≥–æ, –∫–µ–º —Ç—ã –º–æ–≥ –±—ã —Å—Ç–∞—Ç—å, –µ—Å–ª–∏ –±—ã –ø–µ—Ä–µ—Å—Ç–∞–ª –Ω—ã—Ç—å –∏ –Ω–∞—á–∞–ª –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.

<code>¬´–ù—É –º–∞-–∞-–∞–º, –Ω—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –≥–æ–≤–æ—Ä–∏ –¢–∞–π–ª–µ—Ä—É –î—ë—Ä–¥–µ–Ω—É, —á—Ç–æ —è –Ω–µ –¥–æ–µ–ª –∫–∞—à—É...¬ª</code>

–í –æ–±—â–µ–º, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—à—å –∑–∞–¥–∞–Ω–∏–µ (–∏–ª–∏ —Ö–æ—Ç—è –±—ã —Å–¥–µ–ª–∞–µ—à—å –≤–∏–¥) - –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∂–∏—Ä–Ω—É—é —Ç–∞–∫—É—é –≥–∞–ª–æ—á–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –∑–∞–¥–∞–Ω–∏–π. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–≤–æ–π –º—ã–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è.

–ê –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ò —Ç–∞–∫ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç—ã –Ω–µ –ø–æ–π–º—ë—à—å, —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –±–æ–∏—à—å—Å—è —Ç–æ–≥–æ, —á–µ–≥–æ –±–æ—è–ª—Å—è —Ä–∞–Ω—å—à–µ...

<b>–ì–¥–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º:</b>\n
–ó–∞–≥–ª—è–Ω–∏ –≤ ¬´–ö–∞—Ä—Ç–æ—á–∫—É –±–æ–π—Ü–∞¬ª ‚Äî —Ç–∞–º —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –º—ã–ª–∞ –∏ –∂–µ—Å—Ç–æ–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏. –†–æ–¥–∏—Ç–µ–ª–∏ —è–≤–Ω–æ –±—ã–ª–∏ –Ω–µ –≤ —Å–µ–±–µ.

<b>–ó–∞—á–µ–º –Ω—É–∂–Ω–æ –º—ã–ª–æ?</b>
–ß—Ç–æ–±—ã –æ—Ç–º—ã–≤–∞—Ç—å—Å—è –æ—Ç —Å—Ç—ã–¥–∞ –∑–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!
–ü–æ–Ω–∏–º–∞—é, –º–∞–ª–µ–Ω—å–∫–∏–π –ª—é–±–∏—Ç–µ–ª—å –ë–æ–π—Ü–æ–≤—Å–∫–æ–≥–æ –∫–ª—É–±–∞, —Ç—ã —Ä–µ–¥–∫–æ –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –¥—É—à, –Ω–æ –≥–∏–≥–∏–µ–Ω–∞ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ —Å–ª–∞–±–æ—Å—Ç—å, —ç—Ç–æ –ø—Ä–æ –∫–æ–Ω—Ç—Ä–æ–ª—å. –î–∞–∂–µ –¢–∞–π–ª–µ—Ä –î—ë—Ä–¥–µ–Ω —á–∏—Å—Ç–∏–ª –∑—É–±—ã. –ò–Ω–æ–≥–¥–∞.

<i>–¢—ã –∑–¥–µ—Å—å –Ω–µ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –¢—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ª–æ–º–∞—Ç—å —Ç–æ, —á—Ç–æ –º–µ—à–∞–µ—Ç —Ç–µ–±–µ –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º.</i>
'''


def split_text(text: str, max_chars: int) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤, –æ–±—Ä—ã–≤–∞—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–≤–æ–π–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–∞—Ö"""
    pages = []
    current_page = ""
    paragraphs = text.strip().split('\n\n')

    for para in paragraphs:
        if len(current_page) + len(para) + 2 <= max_chars:
            current_page += para + "\n\n"
        else:
            if current_page:
                pages.append(current_page.strip())
            current_page = para + "\n\n"

    if current_page:
        pages.append(current_page.strip())
    return pages


text_pages = split_text(TEXT, CHARS_PER_PAGE)


def build_page(page_num: int) -> tuple[str, InlineKeyboardBuilder]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    page_num = max(0, min(page_num, len(text_pages) - 1))
    page_content = f"{HEAD}\n{text_pages[page_num]}\n{DOWN}"

    builder = InlineKeyboardBuilder()

    prev_data = "no_action" if page_num == 0 else f"page_{page_num - 1}"
    builder.button(text="<<", callback_data=prev_data)

    builder.button(text=f"{page_num + 1}/{len(text_pages)}", callback_data="no_action")

    next_data = "no_action" if page_num == len(text_pages) - 1 else f"page_{page_num + 1}"
    builder.button(text=">>", callback_data=next_data)
    builder.button(text="–í –º–µ–Ω—é", callback_data='to GENERAL from BOOK')

    builder.adjust(3, 1)

    return page_content, builder
